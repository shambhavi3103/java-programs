class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class SinglyLinkedList{
    Node head;

    // Insert at beginning
    void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Insert at end
    void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }

        temp.next = newNode;
    }

    // Insert at specific position (1-based index)
    void insertAtPosition(int data, int position) {
        if (position < 1) {
            System.out.println("Invalid position!");
            return;
        }

        if (position == 1) {
            insertAtBeginning(data);
            return;
        }

        Node newNode = new Node(data);
        Node temp = head;

        for (int i = 1; i < position - 1 && temp != null; i++) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("Position out of range!");
            return;
        }

        newNode.next = temp.next;
        temp.next = newNode;
    }

    // Delete from beginning
    void deleteFromBeginning() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        head = head.next;
    }

    // Delete from end
    void deleteFromEnd() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        if (head.next == null) {
            head = null;
            return;
        }

        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }

        temp.next = null;
    }

    // Delete from specific position
    void deleteFromPosition(int position) {
        if (position < 1 || head == null) {
            System.out.println("Invalid position or empty list.");
            return;
        }

        if (position == 1) {
            deleteFromBeginning();
            return;
        }

        Node temp = head;
        for (int i = 1; i < position - 1 && temp.next != null; i++) {
            temp = temp.next;
        }

        if (temp.next == null) {
            System.out.println("Position out of range!");
            return;
        }

        temp.next = temp.next.next;
    }

    // Display the list
    void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    // Main method to demonstrate functionality
    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();

        // Insert at beginning (3 elements)
        list.insertAtBeginning(30);
        list.insertAtBeginning(20);
        list.insertAtBeginning(10);
        System.out.println("After inserting 3 elements at beginning:");
        list.display();

        // Insert at end (3 elements)
        list.insertAtEnd(40);
        list.insertAtEnd(50);
        list.insertAtEnd(60);
        System.out.println("After inserting 3 elements at end:");
        list.display();

        // Insert at specific position
        list.insertAtPosition(25, 3); // Insert 25 at position 3
        System.out.println("After inserting 25 at position 3:");
        list.display();

        // Delete from beginning
        list.deleteFromBeginning();
        System.out.println("After deleting from beginning:");
        list.display();

        // Delete from end
        list.deleteFromEnd();
        System.out.println("After deleting from end:");
        list.display();

        // Delete from specific position
        list.deleteFromPosition(4); // Deletes the node at position 4
        System.out.println("After deleting from position 4:");
        list.display();
    }
}
